{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../ConnectionSpinner.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { setContext } from \"svelte\";\n  import { writable } from \"svelte/store\";\n  import { googleMapsConfig } from \"./google-maps.config\";\n  import { solaceContextKey } from \"./solace-client\";\n  import ConnectionForm from \"./ConnectionForm.svelte\";\n  import FeedToggles from \"./FeedToggles.svelte\";\n  import Map from \"./Map.svelte\";\n\n  export let googleMapsLoaded;\n\n  const googleMapsAccessToken = googleMapsConfig.accessToken;\n\n  let solaceClient = writable(null);\n  setContext(solaceContextKey, {\n    getSolaceClient: () => solaceClient,\n  });\n</script>\n\n<style>\n  .layout {\n    grid-template-columns: 28rem auto;\n    grid-template-areas: \"sidebar mainContent\";\n  }\n  .sidebar {\n    grid-area: sidebar;\n  }\n  .mainContent {\n    grid-area: mainContent;\n  }\n</style>\n\n<svelte:head>\n  <script\n    defer\n    async\n    src={`https://maps.googleapis.com/maps/api/js?key=${googleMapsAccessToken}&libraries=drawing&callback=initMap`}>\n    // Google Maps isn't available as a Node package because... Google eats glue? I have no idea.\n    // This script loads the Google Maps package and then calls the initMap callback defined in main.js,\n    // which will set this component's googleMapsLoaded state flag to true on completion.\n  </script>\n</svelte:head>\n\n<main class=\"p-2 overflow-x-hidden max-w-screen lg:h-screen lg:grid lg:gap-4 lg:p-4 layout\">\n  <div class=\"flex flex-col sidebar\">\n    <div>\n      <ConnectionForm />\n    </div>\n    <div class=\"mt-4\">\n      <FeedToggles />\n    </div>\n  </div>\n  <div class=\"flex flex-col mainContent\">\n    {#if googleMapsLoaded}\n      <div class=\"p-2 mt-4 bg-white rounded-lg shadow lg:h-full lg:mt-0\" style=\"height: 36rem;\">\n        <Map />\n      </div>\n    {:else}\n      <div class=\"w-full bg-blue-300 rounded-lg shadow\" />\n    {/if}\n  </div>\n</main>\n",
    "<script>\n  export let size = 25;\n  export let speed = 750;\n  export let color = \"rgba(0,0,0,0.4)\";\n  export let thickness = 2;\n  export let gap = 40;\n  export let radius = 10;\n  let dash;\n  $: dash = (2 * Math.PI * radius * (100 - gap)) / 100;\n</script>\n\n<style>\n  .svelte-spinner {\n    transition-property: transform;\n    animation-name: svelte-spinner_infinite-spin;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n  }\n  @keyframes svelte-spinner_infinite-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n</style>\n\n<!-- Ty EmilTholin for creating a high quality open source spinner -->\n<!-- https://github.com/EmilTholin/svelte-spinner/blob/master/src/index.svelte -->\n<svg height={size} width={size} style=\"animation-duration:{speed}ms;\" class=\"svelte-spinner\" viewbox=\"0 0 32 32\">\n  <circle\n    role=\"presentation\"\n    cx=\"16\"\n    cy=\"16\"\n    r={radius}\n    stroke={color}\n    fill=\"none\"\n    stroke-width={thickness}\n    stroke-dasharray=\"{dash},100\"\n    stroke-linecap=\"round\" />\n</svg>\n"
  ],
  "names": [],
  "mappings": "AAoBE,OAAO,cAAC,CAAC,AACP,qBAAqB,CAAE,KAAK,CAAC,IAAI,CACjC,mBAAmB,CAAE,qBAAqB,AAC5C,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,OAAO,AACpB,CAAC,AACD,YAAY,cAAC,CAAC,AACZ,SAAS,CAAE,WAAW,AACxB,CAAC;ACjBD,eAAe,cAAC,CAAC,AACf,mBAAmB,CAAE,SAAS,CAC9B,cAAc,CAAE,0CAA4B,CAC5C,yBAAyB,CAAE,QAAQ,CACnC,yBAAyB,CAAE,MAAM,AACnC,CAAC,AACD,WAAW,0CAA6B,CAAC,AACvC,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,OAAO,IAAI,CAAC,AACzB,CAAC,AACD,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACH,CAAC"
}